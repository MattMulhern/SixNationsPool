#!/usr/bin/python

import random
import json
import sys

players = []
matches = []

def addPlayer (forename, surname, email, paid = False):
    player = {
                'id'      : len(players) + 1,
                'forename': forename,
                'surname' : surname,
                'email'   : email,
                'paid'    : paid,
                'guesses' : [],
                'points'  : 0
             }

    players.append (player)
    return

def addGuess (playerid, matchid, guess):
    playerIndex = int(playerid) - 1
    matchIndex = int(matchid) - 1

    fullguess = ( 1 if guess[0] < guess[1] else (0 if guess[0] == guess[1] else -1), guess[0], guess[1] )

    if len( players[playerIndex]['guesses'] ) < matchIndex:
        for i in range( matchIndex + 1 ):
            players[playerIndex]['guesses'].append(())

    players[playerIndex]['guesses'][matchIndex] = fullguess
    return

def updatePoolResults():
    for player in players:
        calculatePlayerResults( player, False )

    return

def calculatePlayerResults( player, debug ):
    matchindex  = 0
    total       = 0
    matchindex  = 0
    for guess in player['guesses']:
        if guess:
            result = matches[matchindex]['result']
            if result:
                ''' Calculation for points:
                    - If result is correct, 5 points.
                    - If home team score within 7, 2 points.
                    - If away team score within 7, 2 points.
                    - If score exactly right, 3 points.
                '''
                total += (5 if result[0] == guess[0] else 0)
                total += (2 if result[1] == guess[1] else 0)
                total += (2 if result[2] == guess[2] else 0)
                total += (3 if result[1] == guess[1] and result[2] == guess[2] else 0)
                player['points'] += total

        matchindex += 1

    return

def printPoolTable():
    updatePoolResults()

    results = sorted(players, key=lambda player: player['points'], reverse=True)

    print '+++++++++++++++++++++++++++++++++++'
    print '\tResults'
    print '+++++++++++++++++++++++++++++++++++'
    print 'Position\t| Name\t\t\t| Points |'
    i = 1
    for player in results:
        print '{:^5}\t\t| {} {:<10} \t| {:^5}\t |'.format(i, player['forename'], player['surname'], player['points'])
        i += 1

    print '++++++++++++++++++++++++++++++++++\n'


def printPlayers():
    print "=================================="
    print "\tPlayers"
    print "==================================\n"
    for player in players:
        printPlayerDetails(player)
    return

def printPlayerById(id):
    print "=================================="
    print "\tPlayer"
    print "==================================\n"
    playerindex = int(id) - 1
    printPlayerDetails(players[playerindex])

def printPlayerDetails(player):
    print "Player {}".format(player['id'])
    print "Name:\t\t {} {}".format(player['forename'], player['surname'])
    print "Email:\t\t {}".format(player['email'])
    print "Paid:\t\t {}".format(player['paid'])
    print "Currrent Score:\t {}".format(player['points'])

    if player['guesses']:
        print "---"
        print "Guesses:"
        i = 0
        for guess in player['guesses']:
            if guess:
                winstring = matches[i]['hometeam'] + ' Win!' if guess[0] == -1 else ('Draw!' if guess[0] == 0 else matches[i]['awayteam'] + ' Win!')
                print 'Match {}\t - {} v {}:\t {} - {} - {}'.format(matches[i]['id'], matches[i]['hometeam'], matches[i]['awayteam'], guess[1], guess[2], winstring)
            i += 1
    print "\n=================================\n"


def addMatch (hometeam, awayteam, venue, date, time):
    match = { 'id'       : len(matches) + 1,
              'hometeam' : hometeam,
              'awayteam' : awayteam,
              'venue'    : venue,
              'date'     : date,
              'time'     : time,
              'result'   : ()
            }
    matches.append(match)
    return

def addMatchResult (id, result):
    index = int(id) - 1
    fullresult = (1 if result[0] < result[1] else (0 if result[0] == result[1] else -1), result[0], result[1])
    matches[index]['result'] = fullresult
    return

def calculateSNTable():
    return

def printSNTable():
    calculateSNTable()
    return

def printMatches():
    print "============================================="
    print "\tMatches:"
    print "=============================================\n"

    for match in matches:
        print "Match {}".format(match['id'])
        print "Home Team:\t {}".format(match['hometeam'])
        print "Away Team:\t {}".format(match['awayteam'])
        print "Venue:\t\t {}".format(match['venue'])
        print "At:\t\t {} {}".format(match['time'], match['date'])
        if match['result']:
            winstring =  match['hometeam'] + ' Win!' if match['result'][0] == -1 else ('Draw!' if match['result'][0] == 0 else match['awayteam'] + ' Win!')
            print "Result:\t\t {} - {} - {}".format(match['result'][1], match['result'][2], winstring)
        print "\n============================================\n"
    return

def printResults():
    print "=============================================="
    print "\tResults"
    print "==============================================\n"

    for match in matches:
        if match['result']:
            winstring =  match['hometeam'] + ' Win!' if match['result'][0] == -1 else ('Draw!' if match['result'][0] == 0 else match['awayteam'] + ' Win!')
            print "{} {} : {} {} v {} {} -\t {}".format(match['date'], match['time'], match['hometeam'], match['result'][1], match['awayteam'], match['result'][2], winstring)

    print "\n==============================================\n"

def saveData():
    try:
        matchoutput  = open('matches.data', 'wb')
        json.dump (matches, matchoutput)
        matchoutput.close()
    except IOError as e:
    #    print "I/O error({0}): {1}".format(e.errno, e.strerror)
        print 'matches.data file cannot be opened.'

    try:
        playeroutput = open('players.data', 'wb')
        json.dump (players, playeroutput)
        playeroutput.close()
    except IOError as e:
    #    print "I/O error({0}): {1}".format(e.errno, e.strerror)
        print 'players.data file cannot be opened.'

def loadData():
    try:
        playerdata = open('players.data', 'rb')
        player = json.load(playerdata)
        players.extend(player)
        playerdata.close()
    except IOError as e:
    #    print "I/O error({0}): {1}".format(e.errno, e.strerror)
        print 'No player data exists. Continuing...'

    try:
        matchdata = open('matches.data', 'rb')
        match = json.load(matchdata)
        matches.extend(match)
        matchdata.close()
    except IOError as e:
    #    print "I/O error({0}): {1}".format(e.errno, e.strerror)
        print 'No match data exists. Continuing...'

    return

if __name__ == '__main__':
    if len(sys.argv) <= 1:
        print 'Please specify one of either add, print, modify or calculate.'
        exit(1)

    loadData()

    if sys.argv[1] == 'add':
        if sys.argv[2] == 'player':
            addPlayer ( forename = sys.argv[3], surname = sys.argv[4], email = sys.argv[5], paid = sys.argv[6] )

        elif sys.argv[2] == 'match':
            addMatch ( hometeam = sys.argv[3], awayteam = sys.argv[4], venue = sys.argv[5], date = sys.argv[6], time = sys.argv[7] )

        elif sys.argv[2] == 'result':
            result = (sys.argv[4], sys.argv[5])
            addMatchResult (id = sys.argv[3], result = result)

        elif sys.argv[2] == 'guess':
            guess = (sys.argv[5], sys.argv[6])
            addGuess (playerid = sys.argv[3], matchid = sys.argv[4], guess = guess)

        elif sys.argv[2] == 'help':
            print 'Facilities for adding players and matches:'
            print 'add player <forename> <surname> <email> <paid>'
            print 'add match  <hometeam> <awayteam> <venue> <date> <time>'
            print 'add result <match-id> <homescore> <awayscore>'
            print 'add guess  <player-id> <match-id> <homescore> <awayscore>'

        else:
            'Unknown add function, please specify either add player or add match, or use add help to see usage text.'

        updatePoolResults()
        saveData()

    elif sys.argv[1] == 'print':
        if sys.argv[2] == 'players':
            printPlayers()

        elif sys.argv[2] == 'player':
            printPlayerById(sys.argv[3])

        elif sys.argv[2] == 'matches':
            printMatches()

        elif sys.argv[2] == 'results':
            printResults()

        elif sys.argv[2] == 'sn-table':
            printSNTable()

        elif sys.argv[2] == 'pool-table':
            printPoolTable()

        elif sys.argv[2] == 'help':
            print 'Facilities for printing details:'
            print 'print players \t\t- Displays details of the players signed up for the Pool.'
            print 'print player <id> \t- Displays details of a specific player, by ID.'
            print 'print matches \t\t- Displays details of the Six Nations championship matches.'
            print 'print results \t\t- Displays short form details of the Six Nations results.'
            print 'print sn-table \t\t- Displays the current Six Nations results table.'
            print 'print pool-table \t- Displays the current Pool results table.'

        else:
            'Please specify what to print, either players, matches, or current table.'

    else:
        print 'Please specify one of either add, print, modify or calculate.'
        exit(1)
